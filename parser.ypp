%{
    #include <iostream>
    #include <vector>
    #include "hw3_output.hpp"
    #include "symbolTable.h"
    #include "parserFuncs.h"
    #include "semanticTypes.h"

    using namespace output;
    using namespace std;

    void yyerror(const char* msg);
%}

%token VOID INT BYTE B BOOL AUTO TRUE FALSE RETURN IF ELSE WHILE BREAK CONTINUE SC COMMA LPAREN LBRACE ID NUM STRING

%right ASSIGN

%left OR
%left AND

%left RELOP_EQUAL
%nonassoc RELOP_COMPARE

%left BINOP_ADD BINOP_SUB
%left BINOP_MUL BINOP_DIV

%left RPAREN
%left RBRACE

%nonassoc ELSE

%right NOT

%%

Program : ProgramM1 Funcs                                                   {
                                                                                checkMainExist();
                                                                                closeScope();
                                                                            }
;

ProgramM1 : /*epsilon*/                                                     {
                                                                                openScope();
                                                                                addFuncToSymTable("print", "VOID", vector<SemTypeName>(1, "STRING"), -1);
                                                                                addFuncToSymTable("printi", "VOID", vector<SemTypeName>(1, "INT"), -1);
                                                                            }
;

Funcs : FuncDecl Funcs                                                      { }
        | /*epsilon*/                                                       { if (yychar != YYEOF) yyerror("not EOF"); }
;

FuncDecl :  RetType ID LPAREN Formals RPAREN
            { addFuncToSymTable($2->getTypeValue(), $1->getTypeName(), $4->getListTypeName(), yylineno); }
            OpenScopeM
            { addFuncArgsToSymTable($4->getListTypeName(), $4->getListNames(), yylineno); }
            LBRACE Statements RBRACE CloseScopeM {}
;

RetType : Type                                                              { $$ = new STRetType($1->getTypeName()); }
          | VOID                                                            { $$ = new STRetType("VOID"); }
;
Formals : FormalsList                                                       { $$ = $1; }
          | /*epsilon*/                                                     { $$ = new STFormalsList();}
;
FormalsList : FormalDecl                                                    { $$ = new STFormalsList($1->getTypeName(), $1->getTypeValue());  }
              | FormalDecl COMMA FormalsList                                { $$ = new STFormalsList($1->getTypeName(), $3->getListTypeName(), $1->getTypeValue(), $3->getListNames()); }
;
FormalDecl : Type ID                                                        { $$ = new STFormalDecl($1->getTypeName(), $2->getTypeValue()); }
;

Statements : Statement                                                      { }
             | Statements Statement                                         { }
;

Statement : OpenScopeM LBRACE Statements RBRACE CloseScopeM                 { }
            | Type ID SC                                                    { addIDToSymTable($2->getTypeValue(), $1->getTypeName(), yylineno); }
            | Type ID ASSIGN Exp SC                                         {
                                                                                addIDToSymTable($2->getTypeValue(), $1->getTypeName(), yylineno);
                                                                                checkValidAssign($1->getTypeName(), $4->getTypeName(), yylineno);
                                                                            }
            | AUTO ID ASSIGN Exp SC                                         {
                                                                                SemTypeName exp_type = $4->getTypeName();
                                                                                //if (exp_type == "FUNC") exp_type = $4->getRetTypeName();
                                                                                if (exp_type == "VOID" || exp_type == "STRING") { output::errorMismatch(yylineno); exit(0); }
                                                                                addIDToSymTable($2->getTypeValue(), exp_type, yylineno);
                                                                                //checkValidAssign($2->getTypeName(), $4->getTypeName(), yylineno);
                                                                            }
            | ID ASSIGN Exp SC                                              {
                                                                                SemTypeName id_type = checkIDInSymTable($1->getTypeValue(), yylineno);
                                                                                checkValidAssign(id_type, $3->getTypeName(), yylineno);
                                                                            }
            | Call SC                                                       { }
            | RETURN SC                                                     { checkRetVal("VOID", yylineno); }
            | RETURN Exp SC                                                 { checkRetVal($2->getTypeName(), yylineno); }
            | IF LPAREN Exp RPAREN
                { checkType($3->getTypeName(), "BOOL", yylineno);
                checkType($3->getTypeName(), "BOOL", yylineno); }
                OpenScopeM Statement CloseScopeM IFELSEM
            | WHILE LPAREN Exp RPAREN
                { checkType($3->getTypeName(), "BOOL", yylineno);
                while_counter++; }
                OpenScopeM Statement                                        {
                                                                                while_counter--;
                                                                                closeScope();
                                                                            };
            | BREAK SC                                                      { checkInWhile('B', yylineno); }
            | CONTINUE SC                                                   { checkInWhile('C', yylineno); }
;

IFELSEM : ELSE OpenScopeM Statement CloseScopeM                             { };
          | /*epsilon*/                                                     %prec ASSIGN { };

CloseScopeM : /*epsilon*/                                                   { closeScope(); };
;

OpenScopeM : /*epsilon*/                                                    { openScope(); };
;

Call : ID LPAREN ExpList RPAREN                                             {
                                                                                SemTypeName ret_type = checkFuncInSymTable($1->getTypeValue(), yylineno);
                                                                                checkFuncArgsInTable($1->getTypeValue(), yylineno, $3->getListTypeName());
                                                                                $$ = new STCall(ret_type);
                                                                            }
       | ID LPAREN RPAREN                                                   {
                                                                                SemTypeName ret_type = checkFuncInSymTable($1->getTypeValue(), yylineno);
                                                                                checkFuncArgsInTable($1->getTypeValue(), yylineno, vector<SemTypeName>());
                                                                                $$ = new STCall(ret_type);
                                                                            }
;

ExpList : Exp                                                               { $$ = new STExpList($1->getTypeName()); }
          | Exp COMMA ExpList                                               { $$ = new STExpList($1->getTypeName(), $3->getListTypeName()); }
;

Type : INT                                                                  { $$ = new STType("INT"); }
       | BYTE                                                               { $$ = new STType("BYTE"); }
       | BOOL                                                               { $$ = new STType("BOOL"); }
;

Exp : LPAREN Exp RPAREN                                                     { $$ = new STExp($2->getTypeName(), "", EXP_TO_LPAREN_EXP_RPAREN, $2); }
      | Exp BINOP_ADD Exp                                                   {
                                                                                checkTypeNumeric($1->getTypeName(), yylineno);
                                                                                checkTypeNumeric($3->getTypeName(), yylineno);
                                                                                $$ = new STExp(checkBINOPResType($1->getTypeName(), $3->getTypeName()), "", EXP_TO_EXP_BINOP_ADD_EXP, $1, $3);
                                                                            }
      | Exp BINOP_SUB Exp                                                   {
                                                                                checkTypeNumeric($1->getTypeName(), yylineno);
                                                                                checkTypeNumeric($3->getTypeName(), yylineno);
                                                                                $$ = new STExp(checkBINOPResType($1->getTypeName(), $3->getTypeName()), "", EXP_TO_EXP_BINOP_SUB_EXP, $1, $3);
                                                                            }
      | Exp BINOP_MUL Exp                                                   {
                                                                                checkTypeNumeric($1->getTypeName(), yylineno);
                                                                                checkTypeNumeric($3->getTypeName(), yylineno);
                                                                                $$ = new STExp(checkBINOPResType($1->getTypeName(), $3->getTypeName()), "", EXP_TO_EXP_BINOP_MUL_EXP, $1, $3);
                                                                            }
      | Exp BINOP_DIV Exp                                                   {
                                                                                checkTypeNumeric($1->getTypeName(), yylineno);
                                                                                checkTypeNumeric($3->getTypeName(), yylineno);
                                                                                $$ = new STExp(checkBINOPResType($1->getTypeName(), $3->getTypeName()), "", EXP_TO_EXP_BINOP_DIV_EXP, $1, $3);
                                                                            }
      | ID                                                                  {
                                                                                SemTypeName id_type = checkIDInSymTable($1->getTypeValue(), yylineno);
                                                                                $$ = new STExp(id_type, "", EXP_TO_ID, $1);
                                                                            }
      | Call                                                                { $$ = new STExp($1->getTypeName(), "", EXP_TO_CALL, $1); }
      | NUM                                                                 { $$ = new STExp("INT", $1->getTypeValue(), EXP_TO_NUM); }
      | NUM B                                                               {
                                                                                checkBValid($1->getTypeValue(), yylineno);
                                                                                $$ = new STExp("BYTE", $1->getTypeValue(), EXP_TO_NUM_B);
                                                                            }
      | STRING                                                              { $$ = new STExp("STRING", "", EXP_TO_STRING, $1); }
      | TRUE                                                                { $$ = new STExp("BOOL", "", EXP_TO_TRUE); }
      | FALSE                                                               { $$ = new STExp("BOOL", "", EXP_TO_FALSE); }
      | NOT Exp                                                             {
                                                                                checkType($2->getTypeName(), "BOOL", yylineno);
                                                                                $$ = new STExp("BOOL", "", EXP_TO_NOT_EXP, $2);
                                                                            }
      | Exp AND M Exp                                                       {
                                                                                checkType($1->getTypeName(), "BOOL", yylineno);
                                                                                checkType($4->getTypeName(), "BOOL", yylineno);
                                                                                $$ = new STExp("BOOL", "", EXP_TO_EXP_AND_EXP, $1, $4, $3);
                                                                            }
      | Exp OR M Exp                                                        {
                                                                                checkType($1->getTypeName(), "BOOL", yylineno);
                                                                                checkType($4->getTypeName(), "BOOL", yylineno);
                                                                                $$ = new STExp("BOOL", "", EXP_TO_EXP_OR_EXP, $1, $4, $3);
                                                                            }
      | Exp RELOP_COMPARE Exp                                               {
                                                                                checkTypeNumeric($1->getTypeName(), yylineno);
                                                                                checkTypeNumeric($3->getTypeName(), yylineno);
                                                                                $$ = new STExp("BOOL", "", EXP_TO_EXP_RELOP_COMPARE_EXP, $1, $3, $2);
                                                                            }
      | Exp RELOP_EQUAL Exp                                                 {
                                                                                checkTypeNumeric($1->getTypeName(), yylineno);
                                                                                checkTypeNumeric($3->getTypeName(), yylineno);
                                                                                $$ = new STExp("BOOL", "", EXP_TO_EXP_RELOP_EQUAL_EXP, $1, $3, $2);
                                                                            }
      | LPAREN Type RPAREN Exp                                              {
                                                                                checkTypeNumeric($2->getTypeName(), yylineno);
                                                                                checkTypeNumeric($4->getTypeName(), yylineno);
                                                                                $$ = new STExp($2->getTypeName(), "", EXP_TO_LPAREN_TYPE_RPAREN_EXP, $4);
                                                                            }
;

M:                                                                          { $$ = new STM(); }

N:                                                                          { $$ = new STN(); }

%%

void yyerror(const char* msg) {
    errorSyn(yylineno);
    exit(0);
}

int main() {
    return yyparse();
}